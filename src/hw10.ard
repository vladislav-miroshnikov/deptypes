\import Data.Bool
\import Data.List
\import Function \hiding (isInj)
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Paths (*>)
\import Paths.Meta
\import hw04
\import lect04 (sym)
\import lect07 (Decide, no, pred, yes)
\import lect10

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции
--    Докажите, что если f и g инъективны, то g o f также инъективна
--    Докажите, что если g o f инъективна, то f также инъективна

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g o f) =>
  \lam {_} {_} eq => p (q eq)

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g o f)) : isInj f =>
  \lam {x} {y} eq => p {x} {y} $ pmap g eq

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения
--    Докажите, что MultipleOf3Or5 вкладывается в Nat

\func isMultipleOf3Or5 (n : Nat) : \Type => \case (mod3 n, mod5 n) \with {
  | (0, _) => \Sigma
  | (_, 0) => \Sigma
  | _ => Empty
}

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n) =>
  unfold (isProp, isMultipleOf3Or5) $ mcases (\lam _ _ => idp)

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc => \lam {_} {_} p => ext (p, isMultipleOf3Or5-isProp _ _ _)

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A) =>
  (\lam (x, eq) => (\lam y y' => sym (eq y) *> eq y', x),
   \lam (isprp, x) => (x, isprp x))

-- 4. Докажите, что Or не является утверждением в общем случае

\func Or-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Or A B)) : Empty =>
  \let f => p Unit-isProp Unit-isProp \in \case f (Or.inl ()) (Or.inr ())

-- 5. Докажите, что LessOrEq является предикатом

\data LessOrEq (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) \elim n, m
  | 0, m => \lam x y => \case \elim x, \elim y \with {
    | z<=n, z<=n => idp
  }
  | suc n, 0 => \lam x _ => \case x
  | suc n, suc m =>
    \lam x y => \case \elim x, \elim y \with {
      | s<=s x, s<=s y => pmap s<=s $ LessOrEq-isProp x y
    }

-- 6. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

\func Nat-isSet : isSet Nat => setLem Nat-Eq nat-eq-isProp nat-to-eq nat-eq-is-eq
  \where {
    \data Nat-Eq (n m : Nat) \elim n, m
      | 0, 0 => eq-zero
      | suc n, suc m => eq-suc (Nat-Eq n m)

    \func nat-eq-isProp (n m : Nat) : isProp (Nat-Eq n m) => \lam x y => nat-eq-isProp-impl n m x y

    \func nat-eq-isProp-impl (n m : Nat) (x y : Nat-Eq n m) : x = y
      | 0, 0, eq-zero, eq-zero => idp
      | suc n, suc m, eq-suc x, eq-suc y => pmap eq-suc $ nat-eq-isProp-impl n m x y

    \func nat-to-eq (n : Nat) : Nat-Eq n n \elim n
      | 0 => eq-zero
      | suc n => eq-suc (nat-to-eq n)

    \func nat-eq-is-eq {n m : Nat} (ns : Nat-Eq n m) : n = m \elim n, m, ns
      | 0, 0, eq-zero => idp
      | suc n, suc m, eq-suc ns => pmap suc $ nat-eq-is-eq ns
  }

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => So (x < y)) n m) \elim n, m
  | 0, 0 => \lam x y => cases (x, y) \with {
    | refl p1, refl p2 => \let p1-p2 : p1 = p2 => Nat-isSet 0 0 p1 p2 \in rewrite p1-p2 idp
    | refl p, inc r => absurd r
    | inc r, refl p => absurd r
    | inc r1, inc r2 => absurd r1
  }
  | 0, suc m => \lam x y => cases (x, y) \with {
    | refl p1, refl p2 => \case p1
    | refl p, inc r => \case p
    | inc r, refl p => \case p
    | inc r1, inc r2 => pmap inc $ cases (r1, r2) \with {
      | (), () => idp {\Sigma}
    }
  }
  | suc n, 0 => \lam x _ => cases x \with {
    | refl p => \case p
    | inc r => absurd r
  }
  | suc n, suc m => \lam x y => cases (x, y) \with {
    | refl p1, refl p2 => pmap refl $ Nat-isSet _ _ p1 p2
    | refl p, inc r => \let r => rewrite (pmap pred p, n<n m) r \in absurd r
    | inc r, refl p => \let r => rewrite (pmap pred p, n<n m) r \in absurd r
    | inc r1, inc r2 => pmap inc ext
  }
  \where {
    \func n<n (n : Nat) : n < n = false \elim n
      | 0 => idp
      | suc n => n<n n
  }

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty =>
  \case p 0 0 (refl idp) (inc z<=n) \with {
  }

-- 7. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A => \lam x y => p $ q (f x) (f y)

-- 8. Докажите, что тип с разрешимым равенством является множеством

\func Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A => setLem
    (\lam x y => \case dec x y \with {
      | yes _ => \Sigma
      | no _ => Empty
    })
    (\lam _ _ => mcases \with {
      | yes p => Unit-isProp
      | no _ => contradiction
    })
    (\lam _ => mcases \with {
      | yes p => ()
      | no _ => contradiction
    })
    (\lam {_} {_} => mcases \with {
      | yes p => \lam _ => p
      | no _ => contradiction
    })

-- 9. Если A и B являются множествами, то A `Or` B тоже является множеством

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B

\func or-isSet {A B : \Type} (p : isSet A) (q : isSet B) : isSet (Or A B) => setLem
    or-equality
    (\lam x y => cases (x, y) \with {
      | inl a, inl b => p a b
      | inl a, inr b => Empty-isProp
      | inr a, inl b => Empty-isProp
      | inr a, inr b => q a b
    })
    (\lam x => cases x \with {
      | inl a => idp
      | inr b => idp
    })
    (\lam {x} {y} => cases (x, y) \with {
      | inl _, inl _ => pmap inl
      | inl a, inr b => contradiction
      | inr b, inl a => contradiction
      | inr _, inr _ => pmap inr
    })
  \where {
    \func or-equality {A B : \Type} (x y : Or A B) : \Type \elim x, y
      | inl a, inl b => a = b
      | inr a, inr b => a = b
      | _, _ => Empty
  }

-- 10. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством

\func pi-isSet {A : \Type} (B : A -> \Type) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x) => setLem
    pi-equality
    (\lam _ _ _ _ => ext (\lam arg => p arg _ _ _ _))
    (\lam _ _ => idp)
    (\lam {_} {_} q => ext q)
  \where {
    \func pi-equality {A : \Type} {B : A -> \Type} (p1 p2 : \Pi (x : A) -> B x) : \Type => \Pi (x : A) -> p1 x = p2 x
  }

-- 11. Докажите, что если A является множеством, то List A также им является

\func List-isSet {A : \Type} (pA : isSet A) : isSet (List A) =>
  setLem {List A} (\lam xs ys => \Pi (i : Nat) -> nth i xs = nth i ys)
      (\lam xs ys => forall-isProp _ $ \lam i => or-isSet pA Unit-isSet (nth i xs) (nth i ys))
      (\lam _ _ => idp)
      aux
  \where {
    \func nth (n : Nat) {A : \Type} (xs : List A) : Or A (\Sigma) \elim n, xs
      | _, nil => inr ()
      | 0, :: x xs => inl x
      | suc n, :: x xs => nth n xs

    \func inlOr {A B : \Type} (d : A) (o : Or A B) : A \elim o
      | inl a => a
      | inr b => d

    \func aux {A : \Type} {xs ys : List A} (p : \Pi (i : Nat) -> nth i xs = nth i ys) : xs = ys \elim xs, ys
      | nil, nil => idp
      | :: x xs, :: y ys => pmap2 (::) (pmap (inlOr x) (p 0)) $ aux $ \lam i => p (suc i)
      | nil, :: y ys => \case p 0
      | :: x xs, nil => \case p 0
  }

-- Optional:
-- 12. Докажите, что n-типы замкнуты относительно образования \Pi-типов
--     Hint: Доказательство по индукции
--     Для случая suc n нужно доказать, что если f, g : \Pi (x : A) -> B x,
--     то f = g эквивалентно \Pi (x : A) -> f x = g x

\func levelPi {A : \Type} (B : A -> \Type) (n : Nat) (p : \Pi (x : A) -> B x `hasLevel` n)
  : (\Pi (x : A) -> B x) `hasLevel` n => {?}
