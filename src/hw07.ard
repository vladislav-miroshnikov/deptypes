\import Data.Bool
\import Data.List
\import Function.Meta
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import lect07
\open Nat (*)

-- 1. Определите предикат принадлежности элемента списку

\data In {A : \Type} (a : A) (xs : List A) \with
  | a, :: x xs => InHead (a = x)
  | a, :: x xs => InTail (In a xs)

-- Optional:
-- 2. Докажите эквивалентность четырех различных определений LessOrEq: lessOrEq, lessOrEq', LessOrEq и LessOrEq'

\func LessOrEq->lessOrEq {x y : Nat} (_ : LessOrEq x y) : lessOrEq x y
  | {0}, {y}, zero<=_ => (y, idp)
  | {suc x}, {suc y}, suc<=suc leq =>
    \have h => LessOrEq->lessOrEq leq \in
      (h.1, pmap suc h.2)

\func lessOrEq->lessOrEq' {x y : Nat} (_ : lessOrEq x y) : lessOrEq' x y
  | {0}, {0}, leq => ()
  | {0}, {suc y}, leq => ()
  | {suc x}, {0}, leq => \case leq.2
  | {suc x}, {suc y}, leq => lessOrEq->lessOrEq' (leq.1, pmap pred leq.2)

\func lessOrEq'->LessOrEq' {x y : Nat} (_ : lessOrEq' x y) : LessOrEq' x y
  | {0}, {0}, leq => <=-refl idp
  | {0}, {suc y}, leq => <=-step (lessOrEq'->LessOrEq' leq)
  | {suc x}, {suc y}, leq => LessOrEq'-suc (lessOrEq'->LessOrEq' leq)
  \where {
    \func LessOrEq'-suc {x y : Nat} (_ : LessOrEq' x y) : LessOrEq' (suc x) (suc y)
      | <=-refl p => <=-refl (pmap suc p)
      | {x}, {suc y}, <=-step leq => <=-step (LessOrEq'-suc leq)
  }

\func LessOrEq'->LessOrEq {x y : Nat} (_ : LessOrEq' x y) : LessOrEq x y
  | {0}, {_}, <=-refl idp => zero<=_
  | {suc x}, {0}, <=-refl p => \case p
  | {suc x}, {suc y}, <=-refl p => suc<=suc (LessOrEq'->LessOrEq (<=-refl $ pmap pred p))
  | {x}, {suc y}, <=-step leq => LessOrEq-step (LessOrEq'->LessOrEq leq)
  \where {
    \func LessOrEq-step {x y : Nat} (_ : LessOrEq x y) : LessOrEq x (suc y)
      | {0}, zero<=_ => zero<=_
      | {suc x}, {suc y}, suc<=suc leq => suc<=suc (LessOrEq-step leq)
  }

-- 3. Определите рефлексивное транзитивное замыкание отношения
--    То есть ReflTransClosure R -- это минимальное рефлексивное и транзитивное отношение, содержащее R

\data ReflTransClosure {A : \Type} (R : A -> A -> \Type) (x y : A)
  | refl (R x y)
  | trans (\Sigma (z : A) (ReflTransClosure R x z) (R z y))


-- 4. Докажите, что если R уже рефлексивно и транзитивно, то ReflTransClosure R эквивалентно R

\func \infix 4 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func ReflTransClosure-lem {A : \Type} (R : A -> A -> \Type)
                           (refl : \Pi (x : A) -> R x x)
                           (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
  : \Pi (x y : A) -> R x y <-> ReflTransClosure R x y => \lam x y => (
  \lam r_x_y => ReflTransClosure.trans (y, ReflTransClosure.refl r_x_y, refl y),
  \lam r => closure R refl trans x y r
)
  \where {
    \func closure {A : \Type} (R : A -> A -> \Type) (refl : \Pi (x : A) -> R x x) (trans : \Pi (x y z : A) ->
        R x y -> R y z -> R x z) (x y : A) (r : ReflTransClosure R x y) : R x y \elim r {
      | ReflTransClosure.refl p => p
      | ReflTransClosure.trans t => trans x t.1 y (closure R refl trans x t.1 t.2) t.3
    }
  }

-- 5. Определите предикат Sublist xs ys на списках, означающий "список xs является подсписком ys"

\data Sublist {A : \Type} (xs ys : List A) \with
  | nil, ys => NilSublist
  | :: x xs, :: y ys => HeadSublist (x = y) (Sublist xs ys)
  | xs, :: y ys => TailSublist (Sublist xs ys)

-- 6. Докажите, что Sublist (filter p xs) xs для любых p и xs

\func Sublist-lem {A : \Type} (p : A -> Bool) (xs : List A) : Sublist (filter p xs) xs \elim xs
  | nil => NilSublist
  | :: x xs => mcases \with {
    | true => HeadSublist idp (Sublist-lem p xs)
    | false => TailSublist (Sublist-lem p xs)
  }

-- 7. Определите filter через if, а не через \case
--    Докажите для этой версии filter лемму filter-lem

\func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim  xs
  | nil => nil
  | :: a xs => if (p a) (a :: filter' p xs) $ filter' p xs

\func filter-lem {A : \Type} (p : A -> Bool) (xs : List A) : LessOrEq (length (filter' p xs)) (length xs)
  | p, nil => zero<=_
  | p, :: a xs => cases (p a) \with {
    | true => suc<=suc (filter-lem p xs)
    | false => <=-helper (filter-lem p xs)
  }
-- 8. Закончите определение функции \func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x из лекции

\func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x =>
  \case f true \as b, idp : f true = b, f false \as b', \elim x, idp : f false = b' \with {
    | true, p, true, true, p1 => rewrite p (rewrite p p)
    | true, p, true, false, p1 => rewrite p1 (rewrite p p)
    | true, p, false, true, p1 => rewrite p (rewrite p p)
    | true, p, false, false, p1 => rewrite p1 (rewrite p1 p1)
    | false, p, true, true, p1 => rewrite p (rewrite p1 p)
    | false, p, true, false, p1 => rewrite p1 (rewrite p p1)
    | false, p, false, true, p1 => rewrite p (rewrite p1 p1)
    | false, p, false, false, p1 => rewrite p1 (rewrite p1 p1)
  }

-- 9. Докажите, что предикат isEven разрешим

\func isEven (n : Nat) => \Sigma (k : Nat) (n = 2 * k)

\func isEven-dec : DecPred isEven => \lam a => aux a
  \where {
    \func aux (a : Nat) : Decide (isEven a) \elim a
      | 0 => yes (zero, idp)
      | 1 => no (\lam (k, n) => one/=even k n)
      | suc (suc n) => cases (aux n) \with {
        | yes (k, n') => yes (suc k, rewrite n' idp)
        | no p => no (\lam (k, m) => p $ even-2 n k m)
      }

    \func one/=even (n : Nat) : 1 = (2 * n) -> Empty \elim n
      | 0 => \lam p => \case p
      | suc n => \lam p => \case p

    \func even-2 (n : Nat) (k : Nat) (even : suc (suc n) = 2 * k) : isEven n \elim k
      | 0 => \case even
      | suc k => (k, pmap pred (pmap pred even))
  }

-- 10. Докажите, что если равенство элементов A разрешимо, то и равенство элементов List A тоже разрешимо

\instance ListEq {A : \Type} (dec : Eq A) : Eq (List A)
  | decideEq (a a' : List A) : Decide (a = a') \with {
    | nil, nil => yes idp
    | nil, :: y ys => no (\case __)
    | :: x xs, nil => no (\case __)
    | :: x xs, :: y ys => cases (dec.decideEq x y) \with {
      | yes x=y => cases (decideEq xs ys) \with {
        | yes xs=ys => yes $ path $ \lam i => :: (x=y i) (xs=ys i)
        | no xs!=ys => no $ \lam p => xs!=ys $ \lam i => cases (p i) \with {
          | nil => nil
          | :: a x1 => x1
        }
      }
      | no x!=y => no $ \lam p => x!=y $ path $ \lam i => cases (p i) \with {
        | nil => x
        | :: a l => a
      }
    }
  }

-- 11. Докажите, что функции FromBoolToDec и FromDecToBool взаимно обратны

\func bdb {A : \Type} (p : A -> Bool) : FromDecToBool (FromBoolToDec p) = p =>
  ext \lam a => unfold (FromBoolToDec, FromDecToBool) $ cases (p a) \with {
    | false => idp
    | true => idp
  }

-- Мы не можем доказать, что FromBoolToDec (FromDecToBool P) = P,
-- но мы можем доказать более слабое утверждение: эти предикаты логически эквивалентны
-- Для этого введем эквивалентность предикатов

\func dbd {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P)) : \Pi (x : A) ->
    (FromBoolToDec (FromDecToBool P)).1 x <-> P.1 x =>
  unfold (FromDecToBool, FromBoolToDec) (\lam _ => mcases \with {
    | yes p => (\lam _ => p, \lam _ => ())
    | no e => (absurd, e)
  })

-- Optional:
-- 12. Парадокс Рассела показывает, что не существует множества всех множеств
--     Если такое множество существует, то мы можем определить множество B, состоящее из множеств, не содержащих себя
--     Тогда B принадлежит себе тогда и только тогда, когда оно себе не принадлежит
--     Отсюда следует противоречие
--
--     Теорема Кантора утверждает, что не существует множества X с сюръекцией из X в множество подмножеств X
--     Её доказательство также конструирует утверждение, которое верно тогда и только тогда, когда оно ложно
--     Верно, что в общем случае существование такого утверждения влечет противоречие
--     Это легко доказать при помощи исключенного третьего, но утверждение верно и без него
--     Докажите этот факт

\func contrProp {A : \Type} (p : A -> Not A) (q : Not A -> A) : Empty => \let x => \lam a => p a a \in x (q x)
