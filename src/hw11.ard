\import Data.Bool
\import Equiv
\import Equiv.Univalence
\import Function
\import Function.Meta
\import Logic (<->, prop-isProp)
\import Meta
\import Paths (*>, inv, pmap)
\import Paths.Meta
\import lect04 (sym)
\import lect11

-- 1. Докажите, что если A : \Prop, то Trunc A эквивалентен A

\func trunc-prop {A : \Prop} : Trunc A <-> A => (\lam t => \case t \with {
  | trunc a => a
}, trunc)


-- 2. Докажите следующий закон де Моргана

\func deMorgan (A B C : \Prop) : (\Sigma A (B `Or` C)) <-> ((\Sigma A B) `Or` (\Sigma A C)) =>
  (
    \lam (l, r) => cases (l, r) \with {
      | a, inl b => inl (a, b)
      | a, inr c => inr (a, c)
    }
  , cases __ \with {
    | inl (a, b) => (a, inl b)
    | inr (a, c) => (a, inr c)
  }
  )

-- 3. Определите элиминатор для Or через Or-rec, не используя паттерн матчинг на Or

\func Or-elim {A B : \Prop} (C : Or A B -> \Prop)
              (f : \Pi (x : A) -> C (inl x)) (g : \Pi (y : B) -> C (inr y))
              (p : A `Or` B) : C p => Or-rec
    (\lam a => transport C (prop-isProp (inl a) p) (f a))
    (\lam b => transport C (prop-isProp (inr b) p) (g b)) p

-- 4. Докажите, что тип утверждений является множеством

\func prop-isSet : isSet \Prop => \lam _ _ => pathInProp

-- 5. Докажите, что функции Prop1-to-Prop2 и Prop2-to-Prop1 взаимно обратны и, как следствие, что Prop1 = Prop2

\func Prop2'=P {A : \Type} (p : isProp A) : Prop2-to-Prop1' A p = A => ext (\new QEquiv {
  | f => outc
  | ret => inc
  | ret_f => inc' p
  | f_sec => outc' p
})
  \where {
    \sfunc outc {A : \Type} {p : isProp A} (x : Prop2-to-Prop1' A p) : A \elim x
      | inc a => a

    \func outc' {A : \Type} (p : isProp A) (x : A) : outc (inc {_} {p} x) = x => \peval outc (inc x)

    \func inc' {A : \Type} (p : isProp A) (x : Prop2-to-Prop1' A p) : inc (outc x) = x \elim x
      | inc a => pmap inc $ outc' _ _
  }

\func Prop1=Prop2 (P : \Prop) : Prop2-to-Prop1 (Prop1-to-Prop2 P) = P => Prop2'=P pathInProp

\func Prop2=Prop1 (P : Prop2) : Prop1-to-Prop2 (Prop2-to-Prop1 P) = P \elim P
  | (P, p) => ext (Prop2'=P p, isProp-prop _ _)
  \where {
    \func prop-set {P : \Type} (p : isProp P) : isSet P =>
      \lam _ _ (path a) (path b) => \let k : a = b => ext (\lam _ => p _ _) \in rewrite k idp

    \func isProp-prop {P : \Type} (p q : isProp P) : p = q => ext (\lam _ _ => prop-set p _ _ _ _)
  }
-- Можно сделать только одно из упражнений 6a, 6b на выбор
-- 6a. Тип С называется когенератором, если для любых множеств A и B и любых функций f, g : A -> B верно,
--     что если h o f = h o g для всех h : B -> C, то f = g
--     Докажите, что \Prop является когенератором

\func isCogenerator (C : \Type) => \Pi {A B : \Set} (f g : A -> B) (p : \Pi (h : B -> C) -> h o f = h o g) -> f = g

\func PropIsCogenerator : isCogenerator \Prop => \lam f _ p => ext \lam a =>
    \have q => pmap (`$ a) $ p ((=) (f a)) \in
      transport (\lam X => X) q idp

-- 6b. Тип X называется инъективным, если для любой функции f : A -> X и любой инъекции i : A -> B
--     существует функция l : B -> X такая, что l o i = f
--     Докажите, что \Prop инъективен

\func isInj {A B : \Type} (f : A -> B) => \Pi (x y : A) -> f x = f y -> x = y

\func isInjective (X : \Type) =>
  \Pi {A B : \Type} (f : A -> X) (i : A -> B) (p : isInj i) -> \Sigma (l : B -> X) (l o i = f)

\func Prop-isInjective : isInjective \Prop =>
  \lam {A B : \Type} (f : A -> \Prop) (i : A -> B) (inj : isInj i) =>
      (\lam (b : B) => Trunc (\Sigma (a : A) (i a = b) (f a)),
       ext \lam (a : A) => ext
           (\case __ \with {
             | trunc (a', p, fa') => rewriteI (inj a' a p) fa'
           },
            \lam (fa : f a) => trunc (a, idp, fa)))

-- Можно сделать только одно из упражнений 7a, 7b на выбор
-- 7a. Докажите, что (Bool = Bool) = Bool

\func BoolAut : (Bool = Bool) = Bool => transport (\lam X => X = Bool) (sym equality=equivalence)
  $ QEquiv-to-= \new QEquiv {
  | f e => e false
  | ret => \case __ \with {
    | false => \new QEquiv {
      | f => \lam b => b
      | ret => \lam b => b
      | ret_f => \lam _ => idp
      | f_sec => \lam _ => idp
    }
    | true => \new QEquiv {
      | f => not
      | ret => not
      | ret_f => not-not
      | f_sec => not-not
    }
  }
  | ret_f e => Equiv.equals $ ext \case \elim __ \with {
    | true => cases (e false arg addPath, e true arg addPath) \with {
      | false, p, false, q => inv (Equiv.ret_f {e} true) *> pmap Equiv.ret (q *> inv p) *> Equiv.ret_f false
      | true, p, true, q => inv (Equiv.ret_f {e} false) *> pmap Equiv.ret (p *> inv q) *> Equiv.ret_f true
      | false, p, true, q => idp
      | true, p, false, q => idp
    }
    | false => cases (e false arg addPath, e true arg addPath) \with {
      | false, p, false, q => idp
      | true, p, true, q => idp
      | false, p, true, q => idp
      | true, p, false, q => idp
    }
  }
  | f_sec b => \case \elim b \with {
    | true => idp
    | false => idp
  }
}
  \where {
    \func equality=equivalence {A B : \Type} : (A = B) = Equiv {A} {B} => QEquiv-to-= univalence
  }
-- 7b. Докажите, что (n+m)-элементное множество равно размеченному объединению n- и m-элементных множеств
