\import Data.Bool
\import Data.Or
\import Function.Meta
\import Logic
\import Meta
\import Paths
\import Paths.Meta

-- 1. Подмножества, инъективные функции

-- В теории множеств мы можем использовать подмножества:
-- { x : A | P x } <= A
-- Любой элемент подмножества буквально является элементом исходного множества

-- В теории множеств у нас есть биекция между одинаковыми подмножествами A
-- и классы эквивалентности инъективных функций B -> A

-- Другой способ -- это вместо подмножеств использовать инъективные функции
-- В теории типов нам доступен только второй способ
-- Например, подмножество выше превращается в следующую функцию:
-- \lam t => t.1 : \Sigma (x : A) (P x) -> A
-- Является ли данная функция инъективной?

\func isEven (_ : Nat) : Bool
  | 0 => true
  | 1 => false
  | suc (suc n) => isEven n

-- Рассмотрим частный случай этой конструкции
-- { n : Nat | So (isEven n) } -- теоретико-множественная нотация
\func Even => \Sigma (n : Nat) (So (isEven n)) -- в теории типов записывается так

-- Функция вложения множества четных чисел в множество всех натуральных чисел
\func Even-inc (e : Even) : Nat => e.1

-- Предикат инъективности функции:
\func isInj {A B : \Type} (f : A -> B) : \Type
  => \Pi {x y : A} -> f x = f y -> x = y

-- Это эквивалентно следующему утверждению только если есть аксиома исключенного третьего
-- \Pi (x y : A) -> Not (x = y) -> Not (f x = f y)

-- Доказательство того, что четные числа вкладываются в натуральные:
\func Even-inc-isInj : isInj Even-inc
  => \lam {(x, p1)} {(y, p2)} p => unfold Even-inc at p $ sigmaEq p (So-eq _ _)

\func So-eq {b : Bool} (p : So b) (q : So b) : p = q \elim b
  | false => \case p
  | true => \case \elim p, \elim q \with {
    | (), () => idp
  }

-- Чтобы доказать, что пары t1 и t2 равны, достаточно доказать, что их компоненты равны:
\func prodEq {A B : \Type} (t1 t2 : \Sigma A B) (p : t1.1 = t2.1) (q : t1.2 = t2.2) : t1 = t2
  => path \lam i => (p i, q i)

-- Обобщение предыдущего утверждения для зависимых пар:
\func sigmaEq {A : \Type} {B : A -> \Type} {t1 t2 : \Sigma (x : A) (B x)}
              (p : t1.1 = t2.1) (q : transport B p t1.2 = t2.2) : t1 = t2
  => ext (p, q)

-- sigmaEq можно доказать напрямую
\func sigmaEq' {A : \Type} {B : A -> \Type} {t1 t2 : \Sigma (x : A) (B x)}
               (p : t1.1 = t2.1) (q : transport B p t1.2 = t2.2) : t1 = t2 \elim t1, t2, p, q
  | (x1, y1), (x2, y2), idp, idp => idp

\func sigmaEq'' {A : \Type} {B : A -> \Type} {t1 t2 : \Sigma (x : A) (B x)}
                (p : t1.1 = t2.1) (q : transport B p t1.2 = t2.2) : t1 = t2 \elim t1, t2
  | (x1, y1), (x2, y2) => Jl
      (\lam x p' => \Pi {y : B x} (q' : transport B p' y1 = y) -> (x1, y1) = {\Sigma (x : A) (B x)} (x, y))
      (\lam q' => path \lam i => (x1, q' i)) p q

-- 2. Еще один пример

\func mod3 (_ : Nat) : Nat
  | 0 => 0
  | 1 => 1
  | 2 => 2
  | suc (suc (suc n)) => mod3 n

\func mod5 (_ : Nat) : Nat
  | 0 => 0
  | 1 => 1
  | 2 => 2
  | 3 => 3
  | 4 => 4
  | suc (suc (suc (suc (suc n)))) => mod5 n

-- Определим множество чисел, которые делятся на 3 или на 5
\func MultipleOf3Or5 => \Sigma (n : Nat) ((mod3 n = 0) `Or` (mod5 n = 0))

-- Функция, отображающая это множество в множество натуральных чисел
\func Mul-inc (m : MultipleOf3Or5) => m.1

-- Она не является инъективной
\func Mul-inc-isInj (p : isInj Mul-inc) : Empty =>
  \let | t => p {15, inl idp} {15, inr idp} idp
       | t' : inl idp = {(mod3 15 = 0) `Or` (mod5 15 = 0)} inr idp => {?}
  \in \case t'
-- Проблема в том, что у нас может быть несколько различных доказательств того факта, что число делится на 3 или на 5

-- 3. Утверждения

-- Проблемы в предыдущем примере не возникло бы, если бы тип, определяющий подмножество,
-- был утверждением, то есть любые его два элемента были бы равны

-- Сформулируем предикат того, что тип является утверждением:
\func isProp (A : \Type) : \Type => \Pi (x y : A) -> x = y

-- Все типы, подходящие под предикат isProp, входят во вселенную \Prop

\func x {A : \Prop} (x y : A) : x = y => {?}

\lemma lem {A : \Prop} : A => {?}

-- Пример не утверждения
\func BoolIsNotProp (p : isProp Bool) : Empty => \case p true false

-- 4. Какие предикаты являются настоящими предикатами (то есть возвращают утверждения)?
--    ⊤, ⊥, ∧, ∨, →, ∀, ∃, =, рекурсвиные предикаты, индуктивные предикаты

-- Пустой тип является утверждением
\func Empty-isProp : isProp Empty => \lam x _ => \case x

-- Одноэлементный тип является утверждением
\func Unit-isProp : isProp (\Sigma) => \lam x y => \case \elim x, \elim y \with { | (), () => idp }

-- Если A и B являются утверждениями, то их произведение (конъюнкция) тоже является утверждением
\func Sigma-isProp {A B : \Type} (pA : isProp A) (pB : isProp B) : isProp (\Sigma A B)
  => \lam _ _ => ext (pA _ _, pB _ _)

\func Sigma'-isProp {A : \Type} (B : A -> \Type) (pA : isProp A) (pB : \Pi (x : A) -> isProp (B x))
  : isProp (\Sigma (x : A) (B x)) => \lam _ _ => ext (pA _ _, pB _ _ _)

-- Это не верно для типов-сумм, то есть у нас (пока) нет дизъюнкций
-- \func Or-isProp {A B : \Type} (pA : isProp A) (pB : isProp B) : isProp (Or A B) => {?}

-- У нас есть импликация
\func Impl-isProp {A B : \Type} {- (pA : isProp A) -} (pB : isProp B) : isProp (A -> B)
  => \lam _ _ => ext (\lam _ => pB _ _)

-- И квантор всеобщности
\func forall-isProp {A : \Type} (B : A -> \Type) (pB : \Pi (x : A) -> isProp (B x)) : isProp (\Pi (x : A) -> B x)
  => \lam _ _ => ext (\lam _ => pB _ _ _)

-- Но квантора существования у нас (пока) нет
-- \func exists-isProp {A : \Type} (B : A -> \Type) (pB : \Pi (x : A) -> isProp (B x))
--   : isProp (\Sigma (x : A) (B x)) => {?}

{- Рекурсивно определенный предикат является утверждением, если ... являются таковыми
\func pred (n : Nat) : \Type
  | 0 => ...
  | suc n => ...
-}

-- Индуктивно определенный предикат может быть утверждением, а может и не быть им

-- Является утверждением
\data \infix 4 <=' (n m : Nat) \with
  | 0, _ => zero<=_
  | suc n, suc m => suc<=suc (n <=' m)

-- Не является утверждением
\data \infix 4 <='' (n m : Nat) \elim m
  | m => <=-refl (n = m)
  | 1 => zero<=one (n = 0)
  | suc m => <=-step (n <='' m)

-- Равенство тоже в общем случае не является утверждением
-- \func equality-isProp {A : \Type} (a a' : A) : isProp (a = a') => {?}

-- Но для многих типов это верно
-- Мы будем называть такие типы множествами
-- Позже мы увидим, что большинство типов являются множествами

-- Определим предикат того, что тип является множеством:
\func isSet (A : \Type) : \Type => \Pi (x y : A) -> isProp (x = y) -- \Pi (x y : A) (p q : x = y) -> p = q

-- По определению равенство между элементами множества является утверждением
\func equality-isProp {A : \Type} (p : isSet A) (a a' : A) : isProp (a = a') => p _ _

-- 5. Примеры множеств: Unit, \Sigma

\func Empty-isSet : isSet Empty => \lam x => \case x

-- A -f-> B -g-> A
-- \------id-----^
\func retract-isProp {A B : \Type} (pB : isProp B) (f : A -> B) (g : B -> A)
                     (h : \Pi (x : A) -> g (f x) = x) : isProp A
  => \lam _ _ => inv (h _) *> pmap g (pB _ _) *> h _

\func Unit-isSet : isSet (\Sigma) => \lam x y
  => retract-isProp Unit-isProp (\lam _ => ()) (\lam _ => Unit-isProp x y)
     \lam p => \case \elim x, \elim y, \elim p \with { | (), y, idp => idp }

\data Unit | unit

\func Unit'-isProp : isProp Unit => \lam x y => \case \elim x, \elim y \with {
  | unit, unit => idp
}

\func Unit'-isSet : isSet Unit
  => \lam x y => retract-isProp Unit-isProp (\lam _ => ()) (\lam _ => Unit'-isProp x y)
      (\lam p => \case \elim x, \elim y, \elim p \with { | unit, y, idp => idp })

\func setLem {A : \Type} (B : A -> A -> \Type) (pB : \Pi (x y : A) -> isProp (B x y))
--           (f : \Pi {a a' : A} -> a = a' -> B a a')
             (f : \Pi (a : A) -> B a a)
             (g : \Pi {a a' : A} -> B a a' -> a = a')
  : isSet A =>
    \let | f' {a a' : A} (p : a = a') : B a a' => transport (B a) p (f a)
         | h {a a' : A} (p : a = a') => g (f' p)
         | h-idemp {a a' : A} (p : a = a') : h (h p) = h p => pmap g (pB a a' (f' (h p)) (f' p))
         | h-lem {a a' : A} (p : a = a') : h p = h idp *> p => \case \elim a', \elim p \with {
           | a', idp => idp
         }
         | h-lem' {a a' : A} (p : a = a') : h p = h idp *> h p => inv (h-idemp _) *> h-lem _
         | h_idp=idp (a : A) : h idp = idp {A} {a} => *>-lem _ _ (h-lem' idp)
    \in \lam x y => retract-isProp (pB x y) f' g (\lam p => \case \elim y, \elim p \with {
      | y, idp => h_idp=idp x
    })

\func Sigma-isSet {A : \Type} (B : A -> \Type)
                  (pA : isSet A) (pB : \Pi (x : A) -> isSet (B x))
  : isSet (\Sigma (x : A) (B x))
  => setLem (\lam t1 t2 => \Sigma (p : t1.1 = t2.1) (transport B {t1.1} {t2.1} p t1.2 = t2.2))
      (\lam x y p1 p2 => ext (pA x.1 y.1 p1.1 p2.1, pB y.1 _ _ _ _))
      (\lam a => later \case \elim a \with { | (x, y) => (idp, idp) })
      (\lam {a} {a'} p12 => later \case \elim a, \elim a', \elim p12 \with {
        | (x1, x2), (y1, y2), (p1, p2) => ext (p1, p2)
      })

-- 6. Свойства операций над =

-- Так как равенства могут быть нетривиальными типами, то различные операции над ними могут быть
-- нетривиальными функциями, а не просто доказательствами импликаций
-- Например, функция, доказывающая транзитивность, примененная к \Set, задает композицию биекций
-- \func \infixr 5 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
--  \elim q
--  | idp => p

-- Будем называть типы, равенство элементов которых является множеством, группоидами
\func isGpd (A : \Type) => \Pi (x y : A) -> isSet (x = y)

-- Мы можем доказывать различные свойства этой функции
-- Например, idp является единицей справа и слева для *>
\func idp-right {A : \Type} {x y : A} (p : x = y) : p *> idp = p => idp

\func idp-left {A : \Type} {x y : A} (p : x = y) : idp *> p = p \elim p
  | idp => idp

-- *> ассоциативна
\func *>-assoc {A : \Type} {x y z w : A} (p : x = y) (q : y = z) (r : z = w)
  : (p *> q) *> r = p *> (q *> r) \elim q, r
  | idp, idp => idp

-- inv возвращает обратный элемент
\func inv-left {A : \Type} {x y : A} (p : x = y) : inv p *> p = idp \elim p
  | idp => idp

\func inv-right {A : \Type} {x y : A} (p : x = y) : p *> inv p = idp \elim p
  | idp => idp

\func *>-lem {A : \Type} {a a' : A} (p : a = a) (q : a = a') (s : q = p *> q) : p = idp \elim q
  | idp => inv s

-- То есть *> похожа на операцию в группе
-- Мы можем доказать различные равенства, верные в группах
-- Например, мы можем доказать, что можно сокращать слева на элемент
\func cancelLeft {A : \Type} {x y z : A} (p : x = y) (q r : y = z) (s : p *> q = p *> r) : q = r \elim p, r
  | idp, idp => inv (idp-left _) *> s

-- 7. Гомотопический уровень

-- isProp == is-(-1)-Type
-- isSet == is-0-Type
-- isGpd == is-1-Type
-- is-2-Type A => \Pi (x y : A) -> isGpd (x = y)
-- is-3-Type A => \Pi (x y : A) -> is-2-Type (x = y)

-- Мы можем определить семейство предикатов на типах:
\func hasLevel (A : \Type) (n : Nat) : \Type \elim n
  | 0 => isSet A
  | suc n => \Pi (a a' : A) -> hasLevel (a = a') n

-- Таким образом, isSet A -- это A `hasLevel` 0, а isGpd A -- это A `hasLevel` 1
\func baz => Nat `hasLevel` 0
